import pandas as pd
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, recall_score, classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.impute import SimpleImputer
import seaborn as sns
import numpy as np
import matplotlib as mpl
import aiohttp
import asyncio
import warnings

warnings.filterwarnings('ignore')

async def download_file(url, filepath):
    connector = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=connector) as session:
        async with session.get(url) as response:
             with open(filepath, 'wb') as file:
                file.write(await response.read())

def read_data(filepath):
    return pd.read_csv(filepath)

async def main():
    url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
    filepath = "dataset_part_2.csv"
    await download_file(url, "dataset_part_2.csv")

    df = read_data(filepath)
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    print(df.head(10))

    # sns.catplot(y="PayloadMass", x="FlightNumber", hue="Class", data=df, aspect=5)
    # plt.xlabel("Flight Number", fontsize=20)
    # plt.ylabel("Pay load Mass (kg)", fontsize=20)
    # plt.show()

    # Task 1
    # sns.catplot(x='FlightNumber', y='LaunchSite', hue='Class', data=df, kind='strip')
    # plt.xlabel("Flight Number", fontsize=20)
    # plt.ylabel("LaunchSite", fontsize=20)
    # plt.show()

    # Task 2
    # sns.catplot(x='PayloadMass', y='LaunchSite', hue='Class', data=df, kind='strip')
    # plt.xlabel("PayloadMass (KG)", fontsize=20)
    # plt.ylabel("LaunchSite", fontsize=20)
    # plt.show()

    # Task 3
    # orbit_success_rate = df.groupby('Orbit')['Class'].mean()
    # plt.figure(figsize=(10, 6))
    # orbit_success_rate.plot(kind='bar', color='skyblue')
    # plt.title('Success Rate by Orbit Type')
    # plt.xlabel('Orbit Type')
    # plt.ylabel('Success Rate')
    # plt.xticks(rotation=45, ha='right')
    # plt.show()

    # Task 4
    # plt.figure(figsize=(12, 8))
    # sns.scatterplot(data=df, x='FlightNumber', y='Orbit', hue='Class', palette='coolwarm', alpha=0.7)
    # plt.title('Relationship between Flight Number and Orbit Type with Class as Hue')
    # plt.xlabel('Flight Number')
    # plt.ylabel('Orbit Type')
    # plt.legend(title='Class', loc='upper right')
    # plt.show()

    # Task 5
    # plt.figure(figsize=(12, 8))
    # sns.scatterplot(data=df, x='PayloadMass', y='Orbit', hue='Class', palette='coolwarm', alpha=0.7)
    # plt.title('Relationship between Payload Mass and Orbit Type with Class as Hue')
    # plt.xlabel('Payload Mass')
    # plt.ylabel('Orbit Type')
    # plt.legend(title='Class', loc='upper right')
    # plt.show()

    # Task 6
    # year = []
    # def Extract_year():
    #     for i in df["Date"]:
    #         year.append(i.split("-")[0])
    #     return year
    #
    # df['Year'] = Extract_year()
    # avg_success_rate_per_year = df.groupby('Year')['Class'].mean()
    # plt.figure(figsize=(10, 6))
    # avg_success_rate_per_year.plot(kind='line', marker='o', color='b', linewidth=2)
    # plt.title('Average Launch Success Rate Trend by Year')
    # plt.xlabel('Year')
    # plt.ylabel('Average Success Rate')
    # plt.xticks(rotation=45)
    # plt.grid(True)
    # plt.show()

    # Task 7
    features = df[
        ['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad',
         'Block', 'ReusedCount', 'Serial']]
    print(features.head())
    features_one_hot = pd.get_dummies(df, columns=['Orbit', 'LaunchSite', 'LandingPad', 'Serial'])
    print(features_one_hot.head())

    # Task 8
    features_one_hot[features_one_hot.select_dtypes(include=['number']).columns] = features_one_hot.select_dtypes(
        include=['number']).astype('float64')
    print(features_one_hot.head())


asyncio.run(main())
