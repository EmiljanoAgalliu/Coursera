import pandas as pd
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, recall_score, classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.impute import SimpleImputer
import seaborn as sns
import numpy as np
import matplotlib as mpl
import aiohttp
import asyncio
import warnings
import csv, sqlite3
import prettytable


warnings.filterwarnings('ignore')

async def download_file(url, filepath):
    connector = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=connector) as session:
        async with session.get(url) as response:
             with open(filepath, 'wb') as file:
                file.write(await response.read())

def read_data(filepath):
    return pd.read_csv(filepath)

async def main():
    url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv"
    filepath = "Spacex.csv"
    await download_file(url, "Spacex.csv")

    prettytable.DEFAULT = 'DEFAULT'
    connection = sqlite3.connect("my_data1.db")
    cursor = connection.cursor()

    df = read_data(filepath)
    df.to_sql("SPACEXTBL", connection, if_exists='replace', index=False, method="multi")

    cursor.execute("DROP TABLE IF EXISTS SPACEXTABLE;")
    connection.commit()
    cursor.execute("""
        CREATE TABLE SPACEXTABLE AS
        SELECT * FROM SPACEXTBL
        WHERE Date IS NOT NULL;
    """)
    connection.commit()
    print("Table SPACEXTABLE created successfully.")

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    for table in tables:
        print(table[0])

    cursor.execute("PRAGMA table_info(SPACEXTABLE);")
    columns = cursor.fetchall()
    for column in columns:
        print(column[1])

    cursor.execute("PRAGMA table_info(SPACEXTABLE);")
    columns = cursor.fetchall()
    for column in columns:
        column_name = column[1]
        try:
            cursor.execute(f"SELECT DISTINCT `{column_name}` FROM SPACEXTABLE")
            unique_values = cursor.fetchall()
            print(f"\nUnique values for column: {column_name}")
            for value in unique_values:
                print(value[0])
        except sqlite3.OperationalError as e:
            print(f"Error querying column {column_name}: {e}")


    # Task 1
    cursor.execute("SELECT DISTINCT Launch_Site FROM SPACEXTABLE")
    launch_sites = cursor.fetchall()
    for site in launch_sites:
        print(site[0])

    # Task 2
    cursor.execute("SELECT * FROM SPACEXTABLE WHERE Launch_Site LIKE 'CCA%' LIMIT 5")
    records = cursor.fetchall()
    for record in records:
        print(record)

    # Task 3
    cursor.execute("SELECT SUM(PAYLOAD_MASS__KG_) FROM SPACEXTABLE WHERE Launch_Site = 'NASA (CRS)'")
    total_payload = cursor.fetchone()[0]
    print(f"Total payload mass carried by boosters launched by NASA (CRS): {total_payload}")

    # Task 4
    cursor.execute("SELECT AVG(PAYLOAD_MASS__KG_) FROM SPACEXTABLE WHERE Booster_Version = 'F9 v1.1'")
    average_payload = cursor.fetchone()[0]
    print(f"Average payload mass carried by booster version F9 v1.1: {average_payload}")

    # Task 5
    cursor.execute(
        "SELECT MIN(Date) FROM SPACEXTABLE WHERE Landing_Outcome = 'Success (ground pad)'")
    first_successful_landing_date = cursor.fetchone()[0]
    print(
        f"The date when the first successful landing outcome in ground pad was achieved: {first_successful_landing_date}")

    # Task 6
    cursor.execute("""
        SELECT Booster_Version
        FROM SPACEXTABLE
        WHERE Landing_Outcome = 'Success (drone ship)'
        AND PAYLOAD_MASS__KG_ > 4000
        AND PAYLOAD_MASS__KG_ < 6000
    """)
    boosters = cursor.fetchall()
    for booster in boosters:
        print(booster[0])

    # Task 7
    cursor.execute("SELECT COUNT(*) FROM SPACEXTABLE WHERE Mission_Outcome = 'Success' AND Mission_Outcome = 'Success (payload status unclear)' ")
    successful_missions = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM SPACEXTABLE WHERE Mission_Outcome = 'Failure' AND Mission_Outcome = 'Failure (in flight)'")
    failed_missions = cursor.fetchone()[0]
    print(f"Total successful missions: {successful_missions}")
    print(f"Total failed missions: {failed_missions}")

    # Task 8
    cursor.execute("""
        SELECT Booster_Version
        FROM SPACEXTABLE
        WHERE PAYLOAD_MASS__KG_ = (SELECT MAX(PAYLOAD_MASS__KG_) FROM SPACEXTABLE)
    """)
    boosters = cursor.fetchall()
    for booster in boosters:
        print(booster[0])

    # Task 9
    cursor.execute("""
        SELECT
            CASE
                WHEN substr(Date, 6, 2) = '01' THEN 'January'
                WHEN substr(Date, 6, 2) = '02' THEN 'February'
                WHEN substr(Date, 6, 2) = '03' THEN 'March'
                WHEN substr(Date, 6, 2) = '04' THEN 'April'
                WHEN substr(Date, 6, 2) = '05' THEN 'May'
                WHEN substr(Date, 6, 2) = '06' THEN 'June'
                WHEN substr(Date, 6, 2) = '07' THEN 'July'
                WHEN substr(Date, 6, 2) = '08' THEN 'August'
                WHEN substr(Date, 6, 2) = '09' THEN 'September'
                WHEN substr(Date, 6, 2) = '10' THEN 'October'
                WHEN substr(Date, 6, 2) = '11' THEN 'November'
                WHEN substr(Date, 6, 2) = '12' THEN 'December'
            END AS month,
            Landing_Outcome, Booster_Version, Launch_Site
        FROM SPACEXTABLE
        WHERE Landing_Outcome = 'Failure (drone ship)'
          AND substr(Date, 0, 5) = '2015'
    """)
    records = cursor.fetchall()
    for record in records:
        print(record)

    # Task 10
    cursor.execute("""
        SELECT Landing_Outcome, COUNT(*) AS count
        FROM SPACEXTABLE
        WHERE Date BETWEEN '2010-06-04' AND '2017-03-20'
        GROUP BY Landing_Outcome
        ORDER BY count DESC
    """)

    records = cursor.fetchall()

    for record in records:
        print(f"Landing Outcome: {record[0]}, Count: {record[1]}")

    connection.close()

asyncio.run(main())
